{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the nomad-json-parser documentation \u00b6 A NOMAD parser plugin for parsing json files to entries. Introduction \u00b6 The NOMAD JSON parser allows for the mapping of json files into NOMAD schemas in a flexible way with many features. The mappings are defined in JSON mapper files, which are then used to parse the data files accordingly. Tutorial \u00b6 Tutorial How-to guides \u00b6 How-to guides provide step-by-step instructions for a wide range of tasks, with the overarching topics: Install this plugin Use this plugin Explanation \u00b6 The explanation section provides background knowledge on this plugin.","title":"Home"},{"location":"index.html#welcome-to-the-nomad-json-parser-documentation","text":"A NOMAD parser plugin for parsing json files to entries.","title":"Welcome to the nomad-json-parser documentation"},{"location":"index.html#introduction","text":"The NOMAD JSON parser allows for the mapping of json files into NOMAD schemas in a flexible way with many features. The mappings are defined in JSON mapper files, which are then used to parse the data files accordingly.","title":"Introduction"},{"location":"index.html#tutorial","text":"Tutorial","title":"Tutorial"},{"location":"index.html#how-to-guides","text":"How-to guides provide step-by-step instructions for a wide range of tasks, with the overarching topics: Install this plugin Use this plugin","title":"How-to guides"},{"location":"index.html#explanation","text":"The explanation section provides background knowledge on this plugin.","title":"Explanation"},{"location":"explanation/explanation.html","text":"Explanation \u00b6 In this section, the parsing process is described more in detail. All possible keys can be found here , an example with many features included can be found in the example uploads. The mapper file \u00b6 A mapper file is recognized by the parser, if it is a \".json\" file and contains the text json_mapper_class_key . If there is a key json_mapper_version present, the respective version number is read, otherwise it is set to 1. Then the parser searches, if there already is a JSON mapper with the same key and version present. If so, the process is stopped, as there cannot be two mappers with the same key and version. If not, the JSON is read out the JSONMapper schema from this plugin is filled with the information from the file. All rules are read in the format of the Transformer , except simple rules, which allow for a shorter \"source\": \"target\" syntax and are internally translated into the Transformer syntax. The data file \u00b6 A data file is recognized by the parser, if it is a \".json\" file and contains the text mapped_json_class_key . If there is a key mapped_json_version present, the respective version number is read, otherwise the highest version of the parser will be used. Then the parser searches, if there is a JSON mapper with the same key and, if selected via mapped_json_version , version present. If there is at least one mapper and no specific version is selected, the highest version found will be used. The parser now creates all schemas specified in the mapper, fills them with data from the data file according to the rules, and links them as specified in the mapper. In the end, the main entry (and possible additional archive entries) are created in the upload.","title":"Explanation"},{"location":"explanation/explanation.html#explanation","text":"In this section, the parsing process is described more in detail. All possible keys can be found here , an example with many features included can be found in the example uploads.","title":"Explanation"},{"location":"explanation/explanation.html#the-mapper-file","text":"A mapper file is recognized by the parser, if it is a \".json\" file and contains the text json_mapper_class_key . If there is a key json_mapper_version present, the respective version number is read, otherwise it is set to 1. Then the parser searches, if there already is a JSON mapper with the same key and version present. If so, the process is stopped, as there cannot be two mappers with the same key and version. If not, the JSON is read out the JSONMapper schema from this plugin is filled with the information from the file. All rules are read in the format of the Transformer , except simple rules, which allow for a shorter \"source\": \"target\" syntax and are internally translated into the Transformer syntax.","title":"The mapper file"},{"location":"explanation/explanation.html#the-data-file","text":"A data file is recognized by the parser, if it is a \".json\" file and contains the text mapped_json_class_key . If there is a key mapped_json_version present, the respective version number is read, otherwise the highest version of the parser will be used. Then the parser searches, if there is a JSON mapper with the same key and, if selected via mapped_json_version , version present. If there is at least one mapper and no specific version is selected, the highest version found will be used. The parser now creates all schemas specified in the mapper, fills them with data from the data file according to the rules, and links them as specified in the mapper. In the end, the main entry (and possible additional archive entries) are created in the upload.","title":"The data file"},{"location":"how_to/install_this_plugin.html","text":"Install This Plugin \u00b6 nomad-json-parser can be installed to your oasis via the steps given in here .","title":"Install this Plugin"},{"location":"how_to/install_this_plugin.html#install-this-plugin","text":"nomad-json-parser can be installed to your oasis via the steps given in here .","title":"Install This Plugin"},{"location":"how_to/use_this_plugin.html","text":"How to Use This Plugin \u00b6 This plugin can be used in a NOMAD Oasis installation. Add This Plugin to Your NOMAD installation \u00b6 Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.","title":"Use this Plugin"},{"location":"how_to/use_this_plugin.html#how-to-use-this-plugin","text":"This plugin can be used in a NOMAD Oasis installation.","title":"How to Use This Plugin"},{"location":"how_to/use_this_plugin.html#add-this-plugin-to-your-nomad-installation","text":"Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.","title":"Add This Plugin to Your NOMAD installation"},{"location":"reference/references.html","text":"References \u00b6 This page will provide information to all possible keys in the JSON files. The mapper file \u00b6 On the top level of the JSON, the following keys are possible: json_mapper_class_key : Mandatory, gives the key to find matching data entries. Format: string. json_mapper_version : Optional, defines, which version this mapper is for the respective key. Default value: 1. Format: integer. The JSON mapper the contains information of the schemas to map. Each of these starts with a name, which has no further meaning. Possible keys for each schema are: is_main : Optional, but has to be True for exactly one entry. Default value: False. Format: boolean. schema : Mandatory, gives the python path to the schema to map onto. Format: string. main_key : Mandatory for all schemas except the one with \"is_main\": \"True\" . Gives the key in the main NOMAD schema, where this section is attached. Can be nested with \".\". Format: string. repeats : Optional, indicates that the main_key point is a repeatable subsection, where this schema is just appended to. Default value: False. Format: boolean. is_archive : Optional, indicates that this schema is a separate archive and only the reference is linked in the main entry. Default value: False. Format: boolean. rules : Mandatory, contains mapping rules for the data. Simple mappings (also nested with \".\") from source to target can be given just by \"source\": \"target\" , more complex mapping rules are possible as described in the Transformer . The data file \u00b6 The data file has the following possible keys: json_mapper_class_key : Mandatory, gives the key to find matching parser. Format: string. json_mapper_version : Optional, specify, which version this mapper is used. Default value: highest. Format: integer. Apart from these two keys, the data file can contain the data in any JSON format.","title":"Reference"},{"location":"reference/references.html#references","text":"This page will provide information to all possible keys in the JSON files.","title":"References"},{"location":"reference/references.html#the-mapper-file","text":"On the top level of the JSON, the following keys are possible: json_mapper_class_key : Mandatory, gives the key to find matching data entries. Format: string. json_mapper_version : Optional, defines, which version this mapper is for the respective key. Default value: 1. Format: integer. The JSON mapper the contains information of the schemas to map. Each of these starts with a name, which has no further meaning. Possible keys for each schema are: is_main : Optional, but has to be True for exactly one entry. Default value: False. Format: boolean. schema : Mandatory, gives the python path to the schema to map onto. Format: string. main_key : Mandatory for all schemas except the one with \"is_main\": \"True\" . Gives the key in the main NOMAD schema, where this section is attached. Can be nested with \".\". Format: string. repeats : Optional, indicates that the main_key point is a repeatable subsection, where this schema is just appended to. Default value: False. Format: boolean. is_archive : Optional, indicates that this schema is a separate archive and only the reference is linked in the main entry. Default value: False. Format: boolean. rules : Mandatory, contains mapping rules for the data. Simple mappings (also nested with \".\") from source to target can be given just by \"source\": \"target\" , more complex mapping rules are possible as described in the Transformer .","title":"The mapper file"},{"location":"reference/references.html#the-data-file","text":"The data file has the following possible keys: json_mapper_class_key : Mandatory, gives the key to find matching parser. Format: string. json_mapper_version : Optional, specify, which version this mapper is used. Default value: highest. Format: integer. Apart from these two keys, the data file can contain the data in any JSON format.","title":"The data file"},{"location":"tutorial/tutorial.html","text":"Tutorial \u00b6 The NOMAD JSON parser can parse two kinds of JSON files: Mappers and data files. The mappers define a mapping schema, which contains information about which NOMAD schemas should be created, how they are linked together, and how they are filled with data from the JSON data files. The data files contain the actual data. The mapper file \u00b6 The mapper file is a JSON file with a fixed structure. A simple example could be as follows: { \"json_mapper_class_key\": \"examplemapper\", \"main_schema\": { \"is_main\": \"True\", \"schema\": \"nomad_json_parser.schema_packages.example.MainLevel\", \"rules\": { \"Mainname\": \"string\" } }, \"Sublevel1\": { \"schema\": \"nomad_json_parser.schema_packages.example.SubLevel1\", \"main_key\": \"nesting\", \"rules\": { \"Sublevels.SublevelOne\": \"string\" } } } The key json_mapper_class_key has to be present, as it is used to match the mapper with the suitable data files. After that, the single NOMAD schemas and subsections are following. Here, exactly one entry has to have the key is_main set to True. Every entry other entry has to have a main_key key, which indicates, where the subsection is connected to the main entry. Every entry has to have a schema key pointing to the python path of the used schema and a rules key containing the mapping rules. Additional possible but not neccessary keys are: - is_archive : This entry will be a separate archive and only referenced in the main entry. - repeats : This indicates a repeating subsection. For more information see the explanation section . The data file \u00b6 The data file is a JSON file, which contains all the important data. It could look as follows: { \"mapped_json_class_key\": \"examplemapper\", \"Mainname\": \"This is the main name\", \"Sublevels\": {\"SublevelOne\": \"This is sublevel 1 name\"} } The key mapped_json_class_key has to be present, as it is used to match the data with the suitable mapper. After that, the data can follow in any JSON format. For more information see the explanation section .","title":"Tutorial"},{"location":"tutorial/tutorial.html#tutorial","text":"The NOMAD JSON parser can parse two kinds of JSON files: Mappers and data files. The mappers define a mapping schema, which contains information about which NOMAD schemas should be created, how they are linked together, and how they are filled with data from the JSON data files. The data files contain the actual data.","title":"Tutorial"},{"location":"tutorial/tutorial.html#the-mapper-file","text":"The mapper file is a JSON file with a fixed structure. A simple example could be as follows: { \"json_mapper_class_key\": \"examplemapper\", \"main_schema\": { \"is_main\": \"True\", \"schema\": \"nomad_json_parser.schema_packages.example.MainLevel\", \"rules\": { \"Mainname\": \"string\" } }, \"Sublevel1\": { \"schema\": \"nomad_json_parser.schema_packages.example.SubLevel1\", \"main_key\": \"nesting\", \"rules\": { \"Sublevels.SublevelOne\": \"string\" } } } The key json_mapper_class_key has to be present, as it is used to match the mapper with the suitable data files. After that, the single NOMAD schemas and subsections are following. Here, exactly one entry has to have the key is_main set to True. Every entry other entry has to have a main_key key, which indicates, where the subsection is connected to the main entry. Every entry has to have a schema key pointing to the python path of the used schema and a rules key containing the mapping rules. Additional possible but not neccessary keys are: - is_archive : This entry will be a separate archive and only referenced in the main entry. - repeats : This indicates a repeating subsection. For more information see the explanation section .","title":"The mapper file"},{"location":"tutorial/tutorial.html#the-data-file","text":"The data file is a JSON file, which contains all the important data. It could look as follows: { \"mapped_json_class_key\": \"examplemapper\", \"Mainname\": \"This is the main name\", \"Sublevels\": {\"SublevelOne\": \"This is sublevel 1 name\"} } The key mapped_json_class_key has to be present, as it is used to match the data with the suitable mapper. After that, the data can follow in any JSON format. For more information see the explanation section .","title":"The data file"}]}